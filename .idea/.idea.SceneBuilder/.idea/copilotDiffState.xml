<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/UI/Left Menu/Camera/CameraModesSwitcher.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/UI/Left Menu/Camera/CameraModesSwitcher.cs" />
              <option name="originalContent" value="using Enums;&#10;using UnityEditor;&#10;using UnityEngine;&#10;using UnityEngine.UI;&#10;&#10;public class CameraModesSwitcher : MonoBehaviour&#10;{&#10;    [SerializeField] private Image mainViewImage;&#10;    [SerializeField] private Sprite mainViewImageSelected;&#10;    [SerializeField] private Sprite mainViewImageDeselected;&#10;    [Space]&#10;    [SerializeField] private Image splitScreenViewImage;&#10;    [SerializeField] private Sprite splitScreenImageSelected;&#10;    [SerializeField] private Sprite splitScreenImageDeselected;&#10;    [Space]&#10;    [SerializeField] private Image cameraViewImage;&#10;    [SerializeField] private Sprite cameraViewImageSelected;&#10;    [SerializeField] private Sprite cameraViewImageDeselected;&#10;&#10;    private Camera mainCamera;&#10;    private Camera selectableCamera;&#10;&#10;    private Button[] modesButtons;&#10;&#10;    private const int zeroDepth = 0;&#10;    private const int lowestDepth = 1;&#10;    private const int middleDepth = 2;&#10;    private const int highestDepth = 3;&#10;&#10;    private CameraModeTypeId currentMode;&#10;&#10;    private void Start()&#10;    {&#10;        mainCamera = Camera.main;&#10;&#10;        modesButtons = this.GetComponentsInChildren&lt;Button&gt;(true);&#10;&#10;        currentMode = CameraModeTypeId.MainView;&#10;    }&#10;&#10;    private void OnEnable()&#10;    {&#10;        SelectionSystem.OnObjectSelected += OnObjectSelected;&#10;        SelectionSystem.OnObjectDeselected += OnObjectDeselected;&#10;    }&#10;&#10;    private void OnDisable()&#10;    {&#10;        SelectionSystem.OnObjectSelected -= OnObjectSelected;&#10;        SelectionSystem.OnObjectDeselected -= OnObjectDeselected;&#10;    }&#10;&#10;    private void OnObjectSelected(SelectableObject selectable)&#10;    {&#10;        if (selectable.type != AssetType.Camera)&#10;            return;&#10;&#10;        ShowButtons(true);&#10;&#10;        selectableCamera = selectable.GetComponentInChildren&lt;Camera&gt;();&#10;&#10;        UpdateModesButtonsEvents(selectableCamera);&#10;&#10;        SetCameraMode(currentMode, selectableCamera);&#10;    }&#10;&#10;    private void OnObjectDeselected()&#10;    {&#10;        ShowButtons(false);&#10;&#10;        if (currentMode == CameraModeTypeId.CameraView)&#10;        {&#10;            SetCameraMode(CameraModeTypeId.MainView, selectableCamera);&#10;        }&#10;    }&#10;&#10;    private void ShowButtons(bool isCameraSelected)&#10;    {&#10;        foreach (var toggle in modesButtons)&#10;        {&#10;            toggle.gameObject.SetActive(isCameraSelected);&#10;        }&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Reassigns modes according to camera&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;selectableCamera&quot;&gt;Currently selected Camera&lt;/param&gt;&#10;    private void UpdateModesButtonsEvents(Camera selectableCamera)&#10;    {&#10;        modesButtons[0].onClick.AddListener(() =&gt; SetCameraMode(CameraModeTypeId.MainView, selectableCamera));&#10;        modesButtons[1].onClick.AddListener(() =&gt; SetCameraMode(CameraModeTypeId.SplitScreenView, selectableCamera));&#10;        modesButtons[2].onClick.AddListener(() =&gt; SetCameraMode(CameraModeTypeId.CameraView, selectableCamera));&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Changes cameras properties according to mode&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;mode&quot;&gt;Defines changes to be made&lt;/param&gt;&#10;    /// &lt;param name=&quot;selectableCamera&quot;&gt;Camera to operate with&lt;/param&gt;&#10;    private void SetCameraMode(CameraModeTypeId mode, Camera selectableCamera)&#10;    {&#10;        currentMode = mode;&#10;&#10;        switch (mode)&#10;        {&#10;            case CameraModeTypeId.MainView:&#10;&#10;                mainViewImage.sprite = mainViewImageSelected;&#10;&#10;                selectableCamera.depth = zeroDepth;&#10;&#10;                var full = new Rect(0, 0, 1, 1);&#10;                mainCamera.rect = full;&#10;                mainCamera.depth = highestDepth;&#10;&#10;                splitScreenViewImage.sprite = splitScreenImageDeselected;&#10;                cameraViewImage.sprite = cameraViewImageDeselected;&#10;                break;&#10;&#10;            case CameraModeTypeId.SplitScreenView:&#10;&#10;                splitScreenViewImage.sprite = splitScreenImageSelected;&#10;&#10;                var mainHalf = new Rect(0, 0, 0.5f, 1);&#10;                mainCamera.rect = mainHalf;&#10;&#10;                var splitHalf = new Rect(0.5f, 0, 0.5f, 1);&#10;                selectableCamera.rect = splitHalf;&#10;                selectableCamera.depth = lowestDepth;&#10;&#10;                mainViewImage.sprite = mainViewImageDeselected;&#10;                cameraViewImage.sprite = cameraViewImageDeselected;&#10;                break;&#10;&#10;            case CameraModeTypeId.CameraView:&#10;&#10;                cameraViewImage.sprite = cameraViewImageSelected;&#10;&#10;                var selectableFull = new Rect(0, 0, 1, 1);&#10;                selectableCamera.rect = selectableFull;&#10;                selectableCamera.depth = middleDepth;&#10;&#10;                mainCamera.depth = zeroDepth;&#10;&#10;                mainViewImage.sprite = mainViewImageDeselected;&#10;                splitScreenViewImage.sprite = splitScreenImageDeselected;&#10;                break;&#10;&#10;            default: break;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using Enums;&#10;using UnityEditor;&#10;using UnityEngine;&#10;using UnityEngine.UI;&#10;&#10;public class CameraModesSwitcher : MonoBehaviour&#10;{&#10;    [SerializeField] private Image mainViewImage;&#10;    [SerializeField] private Sprite mainViewImageSelected;&#10;    [SerializeField] private Sprite mainViewImageDeselected;&#10;    [Space]&#10;    [SerializeField] private Image splitScreenViewImage;&#10;    [SerializeField] private Sprite splitScreenImageSelected;&#10;    [SerializeField] private Sprite splitScreenImageDeselected;&#10;    [Space]&#10;    [SerializeField] private Image cameraViewImage;&#10;    [SerializeField] private Sprite cameraViewImageSelected;&#10;    [SerializeField] private Sprite cameraViewImageDeselected;&#10;&#10;    private Camera mainCamera;&#10;    private Camera selectableCamera;&#10;&#10;    private Button[] modesButtons;&#10;&#10;    private const int zeroDepth = 0;&#10;    private const int lowestDepth = 1;&#10;    private const int middleDepth = 2;&#10;    private const int highestDepth = 3;&#10;&#10;    private CameraModeTypeId currentMode;&#10;&#10;    private void Start()&#10;    {&#10;        mainCamera = Camera.main;&#10;&#10;        modesButtons = this.GetComponentsInChildren&lt;Button&gt;(true);&#10;&#10;        currentMode = CameraModeTypeId.MainView;&#10;    }&#10;&#10;    private void OnEnable()&#10;    {&#10;        SelectionSystem.OnObjectSelected += OnObjectSelected;&#10;        SelectionSystem.OnObjectDeselected += OnObjectDeselected;&#10;    }&#10;&#10;    private void OnDisable()&#10;    {&#10;        SelectionSystem.OnObjectSelected -= OnObjectSelected;&#10;        SelectionSystem.OnObjectDeselected -= OnObjectDeselected;&#10;    }&#10;&#10;    private void OnObjectSelected(SelectableObject selectable)&#10;    {&#10;        if (selectable.type != AssetType.Camera)&#10;            return;&#10;&#10;        ShowButtons(true);&#10;&#10;        selectableCamera = selectable.GetComponentInChildren&lt;Camera&gt;();&#10;&#10;        UpdateModesButtonsEvents(selectableCamera);&#10;&#10;        SetCameraMode(currentMode, selectableCamera);&#10;    }&#10;&#10;    private void OnObjectDeselected()&#10;    {&#10;        ShowButtons(false);&#10;&#10;        if (currentMode == CameraModeTypeId.CameraView)&#10;        {&#10;            SetCameraMode(CameraModeTypeId.MainView, selectableCamera);&#10;        }&#10;    }&#10;&#10;    private void ShowButtons(bool isCameraSelected)&#10;    {&#10;        foreach (var toggle in modesButtons)&#10;        {&#10;            toggle.gameObject.SetActive(isCameraSelected);&#10;        }&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Reassigns modes according to camera&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;selectableCamera&quot;&gt;Currently selected Camera&lt;/param&gt;&#10;    private void UpdateModesButtonsEvents(Camera selectableCamera)&#10;    {&#10;        modesButtons[0].onClick.AddListener(() =&gt; SetCameraMode(CameraModeTypeId.MainView, selectableCamera));&#10;        modesButtons[1].onClick.AddListener(() =&gt; SetCameraMode(CameraModeTypeId.SplitScreenView, selectableCamera));&#10;        modesButtons[2].onClick.AddListener(() =&gt; SetCameraMode(CameraModeTypeId.CameraView, selectableCamera));&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Changes cameras properties according to mode&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;mode&quot;&gt;Defines changes to be made&lt;/param&gt;&#10;    /// &lt;param name=&quot;selectableCamera&quot;&gt;Camera to operate with&lt;/param&gt;&#10;    private void SetCameraMode(CameraModeTypeId mode, Camera selectableCamera)&#10;    {&#10;        currentMode = mode;&#10;&#10;        switch (mode)&#10;        {&#10;            case CameraModeTypeId.MainView:&#10;&#10;                mainViewImage.sprite = mainViewImageSelected;&#10;&#10;                selectableCamera.depth = zeroDepth;&#10;&#10;                var full = new Rect(0, 0, 1, 1);&#10;                mainCamera.rect = full;&#10;                mainCamera.depth = highestDepth;&#10;&#10;                splitScreenViewImage.sprite = splitScreenImageDeselected;&#10;                cameraViewImage.sprite = cameraViewImageDeselected;&#10;                break;&#10;&#10;            case CameraModeTypeId.SplitScreenView:&#10;&#10;                splitScreenViewImage.sprite = splitScreenImageSelected;&#10;&#10;                var mainHalf = new Rect(0, 0, 0.5f, 1);&#10;                mainCamera.rect = mainHalf;&#10;&#10;                var splitHalf = new Rect(0.5f, 0, 0.5f, 1);&#10;                selectableCamera.rect = splitHalf;&#10;                selectableCamera.depth = lowestDepth;&#10;&#10;                mainViewImage.sprite = mainViewImageDeselected;&#10;                cameraViewImage.sprite = cameraViewImageDeselected;&#10;                break;&#10;&#10;            case CameraModeTypeId.CameraView:&#10;&#10;                cameraViewImage.sprite = cameraViewImageSelected;&#10;&#10;                var selectableFull = new Rect(0, 0, 1, 1);&#10;                selectableCamera.rect = selectableFull;&#10;                selectableCamera.depth = middleDepth;&#10;&#10;                mainCamera.depth = zeroDepth;&#10;&#10;                mainViewImage.sprite = mainViewImageDeselected;&#10;                splitScreenViewImage.sprite = splitScreenImageDeselected;&#10;                break;&#10;&#10;            default: break;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>